/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.39) is used. For example, calling `/info` is the same as calling `/v1.39/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.39
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DeviceMapping;
import io.swagger.client.model.HostConfigLogConfig;
import io.swagger.client.model.Mount;
import io.swagger.client.model.PortMap;
import io.swagger.client.model.Resources;
import io.swagger.client.model.ResourcesBlkioWeightDevice;
import io.swagger.client.model.ResourcesUlimits;
import io.swagger.client.model.RestartPolicy;
import io.swagger.client.model.ThrottleDevice;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Container configuration that depends on the host we are running on
 */
@ApiModel(description = "Container configuration that depends on the host we are running on")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-29T20:08:06.738Z")
public class HostConfig extends Resources {
  @SerializedName("Binds")
  private List<String> binds = null;

  @SerializedName("ContainerIDFile")
  private String containerIDFile = null;

  @SerializedName("LogConfig")
  private HostConfigLogConfig logConfig = null;

  @SerializedName("NetworkMode")
  private String networkMode = null;

  @SerializedName("PortBindings")
  private PortMap portBindings = null;

  @SerializedName("RestartPolicy")
  private RestartPolicy restartPolicy = null;

  @SerializedName("AutoRemove")
  private Boolean autoRemove = null;

  @SerializedName("VolumeDriver")
  private String volumeDriver = null;

  @SerializedName("VolumesFrom")
  private List<String> volumesFrom = null;

  @SerializedName("Mounts")
  private List<Mount> mounts = null;

  @SerializedName("CapAdd")
  private List<String> capAdd = null;

  @SerializedName("CapDrop")
  private List<String> capDrop = null;

  @SerializedName("Dns")
  private List<String> dns = null;

  @SerializedName("DnsOptions")
  private List<String> dnsOptions = null;

  @SerializedName("DnsSearch")
  private List<String> dnsSearch = null;

  @SerializedName("ExtraHosts")
  private List<String> extraHosts = null;

  @SerializedName("GroupAdd")
  private List<String> groupAdd = null;

  @SerializedName("IpcMode")
  private String ipcMode = null;

  @SerializedName("Cgroup")
  private String cgroup = null;

  @SerializedName("Links")
  private List<String> links = null;

  @SerializedName("OomScoreAdj")
  private Integer oomScoreAdj = null;

  @SerializedName("PidMode")
  private String pidMode = null;

  @SerializedName("Privileged")
  private Boolean privileged = null;

  @SerializedName("PublishAllPorts")
  private Boolean publishAllPorts = null;

  @SerializedName("ReadonlyRootfs")
  private Boolean readonlyRootfs = null;

  @SerializedName("SecurityOpt")
  private List<String> securityOpt = null;

  @SerializedName("StorageOpt")
  private Map<String, String> storageOpt = null;

  @SerializedName("Tmpfs")
  private Map<String, String> tmpfs = null;

  @SerializedName("UTSMode")
  private String utSMode = null;

  @SerializedName("UsernsMode")
  private String usernsMode = null;

  @SerializedName("ShmSize")
  private Integer shmSize = null;

  @SerializedName("Sysctls")
  private Map<String, String> sysctls = null;

  @SerializedName("Runtime")
  private String runtime = null;

  @SerializedName("ConsoleSize")
  private List<Integer> consoleSize = null;

  /**
   * Isolation technology of the container. (Windows only)
   */
  @JsonAdapter(IsolationEnum.Adapter.class)
  public enum IsolationEnum {
    DEFAULT("default"),
    
    PROCESS("process"),
    
    HYPERV("hyperv");

    private String value;

    IsolationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsolationEnum fromValue(String text) {
      for (IsolationEnum b : IsolationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IsolationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsolationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsolationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IsolationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Isolation")
  private IsolationEnum isolation = null;

  @SerializedName("MaskedPaths")
  private List<String> maskedPaths = null;

  @SerializedName("ReadonlyPaths")
  private List<String> readonlyPaths = null;

  public HostConfig binds(List<String> binds) {
    this.binds = binds;
    return this;
  }

  public HostConfig addBindsItem(String bindsItem) {
    if (this.binds == null) {
      this.binds = new ArrayList<String>();
    }
    this.binds.add(bindsItem);
    return this;
  }

   /**
   * A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest&#x60; to bind-mount a host path into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;host-src:container-dest:ro&#x60; to make the bind mount read-only inside the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest&#x60; to bind-mount a volume managed by a volume driver into the container. &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest:ro&#x60; to mount the volume read-only inside the container.  &#x60;container-dest&#x60; must be an _absolute_ path. 
   * @return binds
  **/
  @ApiModelProperty(value = "A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path. - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path. ")
  public List<String> getBinds() {
    return binds;
  }

  public void setBinds(List<String> binds) {
    this.binds = binds;
  }

  public HostConfig containerIDFile(String containerIDFile) {
    this.containerIDFile = containerIDFile;
    return this;
  }

   /**
   * Path to a file where the container ID is written
   * @return containerIDFile
  **/
  @ApiModelProperty(value = "Path to a file where the container ID is written")
  public String getContainerIDFile() {
    return containerIDFile;
  }

  public void setContainerIDFile(String containerIDFile) {
    this.containerIDFile = containerIDFile;
  }

  public HostConfig logConfig(HostConfigLogConfig logConfig) {
    this.logConfig = logConfig;
    return this;
  }

   /**
   * Get logConfig
   * @return logConfig
  **/
  @ApiModelProperty(value = "")
  public HostConfigLogConfig getLogConfig() {
    return logConfig;
  }

  public void setLogConfig(HostConfigLogConfig logConfig) {
    this.logConfig = logConfig;
  }

  public HostConfig networkMode(String networkMode) {
    this.networkMode = networkMode;
    return this;
  }

   /**
   * Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to.
   * @return networkMode
  **/
  @ApiModelProperty(value = "Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.")
  public String getNetworkMode() {
    return networkMode;
  }

  public void setNetworkMode(String networkMode) {
    this.networkMode = networkMode;
  }

  public HostConfig portBindings(PortMap portBindings) {
    this.portBindings = portBindings;
    return this;
  }

   /**
   * Get portBindings
   * @return portBindings
  **/
  @ApiModelProperty(value = "")
  public PortMap getPortBindings() {
    return portBindings;
  }

  public void setPortBindings(PortMap portBindings) {
    this.portBindings = portBindings;
  }

  public HostConfig restartPolicy(RestartPolicy restartPolicy) {
    this.restartPolicy = restartPolicy;
    return this;
  }

   /**
   * Get restartPolicy
   * @return restartPolicy
  **/
  @ApiModelProperty(value = "")
  public RestartPolicy getRestartPolicy() {
    return restartPolicy;
  }

  public void setRestartPolicy(RestartPolicy restartPolicy) {
    this.restartPolicy = restartPolicy;
  }

  public HostConfig autoRemove(Boolean autoRemove) {
    this.autoRemove = autoRemove;
    return this;
  }

   /**
   * Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set.
   * @return autoRemove
  **/
  @ApiModelProperty(value = "Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.")
  public Boolean isAutoRemove() {
    return autoRemove;
  }

  public void setAutoRemove(Boolean autoRemove) {
    this.autoRemove = autoRemove;
  }

  public HostConfig volumeDriver(String volumeDriver) {
    this.volumeDriver = volumeDriver;
    return this;
  }

   /**
   * Driver that this container uses to mount volumes.
   * @return volumeDriver
  **/
  @ApiModelProperty(value = "Driver that this container uses to mount volumes.")
  public String getVolumeDriver() {
    return volumeDriver;
  }

  public void setVolumeDriver(String volumeDriver) {
    this.volumeDriver = volumeDriver;
  }

  public HostConfig volumesFrom(List<String> volumesFrom) {
    this.volumesFrom = volumesFrom;
    return this;
  }

  public HostConfig addVolumesFromItem(String volumesFromItem) {
    if (this.volumesFrom == null) {
      this.volumesFrom = new ArrayList<String>();
    }
    this.volumesFrom.add(volumesFromItem);
    return this;
  }

   /**
   * A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;.
   * @return volumesFrom
  **/
  @ApiModelProperty(value = "A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.")
  public List<String> getVolumesFrom() {
    return volumesFrom;
  }

  public void setVolumesFrom(List<String> volumesFrom) {
    this.volumesFrom = volumesFrom;
  }

  public HostConfig mounts(List<Mount> mounts) {
    this.mounts = mounts;
    return this;
  }

  public HostConfig addMountsItem(Mount mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<Mount>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

   /**
   * Specification for mounts to be added to the container.
   * @return mounts
  **/
  @ApiModelProperty(value = "Specification for mounts to be added to the container.")
  public List<Mount> getMounts() {
    return mounts;
  }

  public void setMounts(List<Mount> mounts) {
    this.mounts = mounts;
  }

  public HostConfig capAdd(List<String> capAdd) {
    this.capAdd = capAdd;
    return this;
  }

  public HostConfig addCapAddItem(String capAddItem) {
    if (this.capAdd == null) {
      this.capAdd = new ArrayList<String>();
    }
    this.capAdd.add(capAddItem);
    return this;
  }

   /**
   * A list of kernel capabilities to add to the container.
   * @return capAdd
  **/
  @ApiModelProperty(value = "A list of kernel capabilities to add to the container.")
  public List<String> getCapAdd() {
    return capAdd;
  }

  public void setCapAdd(List<String> capAdd) {
    this.capAdd = capAdd;
  }

  public HostConfig capDrop(List<String> capDrop) {
    this.capDrop = capDrop;
    return this;
  }

  public HostConfig addCapDropItem(String capDropItem) {
    if (this.capDrop == null) {
      this.capDrop = new ArrayList<String>();
    }
    this.capDrop.add(capDropItem);
    return this;
  }

   /**
   * A list of kernel capabilities to drop from the container.
   * @return capDrop
  **/
  @ApiModelProperty(value = "A list of kernel capabilities to drop from the container.")
  public List<String> getCapDrop() {
    return capDrop;
  }

  public void setCapDrop(List<String> capDrop) {
    this.capDrop = capDrop;
  }

  public HostConfig dns(List<String> dns) {
    this.dns = dns;
    return this;
  }

  public HostConfig addDnsItem(String dnsItem) {
    if (this.dns == null) {
      this.dns = new ArrayList<String>();
    }
    this.dns.add(dnsItem);
    return this;
  }

   /**
   * A list of DNS servers for the container to use.
   * @return dns
  **/
  @ApiModelProperty(value = "A list of DNS servers for the container to use.")
  public List<String> getDns() {
    return dns;
  }

  public void setDns(List<String> dns) {
    this.dns = dns;
  }

  public HostConfig dnsOptions(List<String> dnsOptions) {
    this.dnsOptions = dnsOptions;
    return this;
  }

  public HostConfig addDnsOptionsItem(String dnsOptionsItem) {
    if (this.dnsOptions == null) {
      this.dnsOptions = new ArrayList<String>();
    }
    this.dnsOptions.add(dnsOptionsItem);
    return this;
  }

   /**
   * A list of DNS options.
   * @return dnsOptions
  **/
  @ApiModelProperty(value = "A list of DNS options.")
  public List<String> getDnsOptions() {
    return dnsOptions;
  }

  public void setDnsOptions(List<String> dnsOptions) {
    this.dnsOptions = dnsOptions;
  }

  public HostConfig dnsSearch(List<String> dnsSearch) {
    this.dnsSearch = dnsSearch;
    return this;
  }

  public HostConfig addDnsSearchItem(String dnsSearchItem) {
    if (this.dnsSearch == null) {
      this.dnsSearch = new ArrayList<String>();
    }
    this.dnsSearch.add(dnsSearchItem);
    return this;
  }

   /**
   * A list of DNS search domains.
   * @return dnsSearch
  **/
  @ApiModelProperty(value = "A list of DNS search domains.")
  public List<String> getDnsSearch() {
    return dnsSearch;
  }

  public void setDnsSearch(List<String> dnsSearch) {
    this.dnsSearch = dnsSearch;
  }

  public HostConfig extraHosts(List<String> extraHosts) {
    this.extraHosts = extraHosts;
    return this;
  }

  public HostConfig addExtraHostsItem(String extraHostsItem) {
    if (this.extraHosts == null) {
      this.extraHosts = new ArrayList<String>();
    }
    this.extraHosts.add(extraHostsItem);
    return this;
  }

   /**
   * A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. 
   * @return extraHosts
  **/
  @ApiModelProperty(value = "A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`. ")
  public List<String> getExtraHosts() {
    return extraHosts;
  }

  public void setExtraHosts(List<String> extraHosts) {
    this.extraHosts = extraHosts;
  }

  public HostConfig groupAdd(List<String> groupAdd) {
    this.groupAdd = groupAdd;
    return this;
  }

  public HostConfig addGroupAddItem(String groupAddItem) {
    if (this.groupAdd == null) {
      this.groupAdd = new ArrayList<String>();
    }
    this.groupAdd.add(groupAddItem);
    return this;
  }

   /**
   * A list of additional groups that the container process will run as.
   * @return groupAdd
  **/
  @ApiModelProperty(value = "A list of additional groups that the container process will run as.")
  public List<String> getGroupAdd() {
    return groupAdd;
  }

  public void setGroupAdd(List<String> groupAdd) {
    this.groupAdd = groupAdd;
  }

  public HostConfig ipcMode(String ipcMode) {
    this.ipcMode = ipcMode;
    return this;
  }

   /**
   * IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration. 
   * @return ipcMode
  **/
  @ApiModelProperty(value = "IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration. ")
  public String getIpcMode() {
    return ipcMode;
  }

  public void setIpcMode(String ipcMode) {
    this.ipcMode = ipcMode;
  }

  public HostConfig cgroup(String cgroup) {
    this.cgroup = cgroup;
    return this;
  }

   /**
   * Cgroup to use for the container.
   * @return cgroup
  **/
  @ApiModelProperty(value = "Cgroup to use for the container.")
  public String getCgroup() {
    return cgroup;
  }

  public void setCgroup(String cgroup) {
    this.cgroup = cgroup;
  }

  public HostConfig links(List<String> links) {
    this.links = links;
    return this;
  }

  public HostConfig addLinksItem(String linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<String>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * A list of links for the container in the form &#x60;container_name:alias&#x60;.
   * @return links
  **/
  @ApiModelProperty(value = "A list of links for the container in the form `container_name:alias`.")
  public List<String> getLinks() {
    return links;
  }

  public void setLinks(List<String> links) {
    this.links = links;
  }

  public HostConfig oomScoreAdj(Integer oomScoreAdj) {
    this.oomScoreAdj = oomScoreAdj;
    return this;
  }

   /**
   * An integer value containing the score given to the container in order to tune OOM killer preferences.
   * @return oomScoreAdj
  **/
  @ApiModelProperty(example = "500", value = "An integer value containing the score given to the container in order to tune OOM killer preferences.")
  public Integer getOomScoreAdj() {
    return oomScoreAdj;
  }

  public void setOomScoreAdj(Integer oomScoreAdj) {
    this.oomScoreAdj = oomScoreAdj;
  }

  public HostConfig pidMode(String pidMode) {
    this.pidMode = pidMode;
    return this;
  }

   /**
   * Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container 
   * @return pidMode
  **/
  @ApiModelProperty(value = "Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container ")
  public String getPidMode() {
    return pidMode;
  }

  public void setPidMode(String pidMode) {
    this.pidMode = pidMode;
  }

  public HostConfig privileged(Boolean privileged) {
    this.privileged = privileged;
    return this;
  }

   /**
   * Gives the container full access to the host.
   * @return privileged
  **/
  @ApiModelProperty(value = "Gives the container full access to the host.")
  public Boolean isPrivileged() {
    return privileged;
  }

  public void setPrivileged(Boolean privileged) {
    this.privileged = privileged;
  }

  public HostConfig publishAllPorts(Boolean publishAllPorts) {
    this.publishAllPorts = publishAllPorts;
    return this;
  }

   /**
   * Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;. 
   * @return publishAllPorts
  **/
  @ApiModelProperty(value = "Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`. ")
  public Boolean isPublishAllPorts() {
    return publishAllPorts;
  }

  public void setPublishAllPorts(Boolean publishAllPorts) {
    this.publishAllPorts = publishAllPorts;
  }

  public HostConfig readonlyRootfs(Boolean readonlyRootfs) {
    this.readonlyRootfs = readonlyRootfs;
    return this;
  }

   /**
   * Mount the container&#39;s root filesystem as read only.
   * @return readonlyRootfs
  **/
  @ApiModelProperty(value = "Mount the container's root filesystem as read only.")
  public Boolean isReadonlyRootfs() {
    return readonlyRootfs;
  }

  public void setReadonlyRootfs(Boolean readonlyRootfs) {
    this.readonlyRootfs = readonlyRootfs;
  }

  public HostConfig securityOpt(List<String> securityOpt) {
    this.securityOpt = securityOpt;
    return this;
  }

  public HostConfig addSecurityOptItem(String securityOptItem) {
    if (this.securityOpt == null) {
      this.securityOpt = new ArrayList<String>();
    }
    this.securityOpt.add(securityOptItem);
    return this;
  }

   /**
   * A list of string values to customize labels for MLS systems, such as SELinux.
   * @return securityOpt
  **/
  @ApiModelProperty(value = "A list of string values to customize labels for MLS systems, such as SELinux.")
  public List<String> getSecurityOpt() {
    return securityOpt;
  }

  public void setSecurityOpt(List<String> securityOpt) {
    this.securityOpt = securityOpt;
  }

  public HostConfig storageOpt(Map<String, String> storageOpt) {
    this.storageOpt = storageOpt;
    return this;
  }

  public HostConfig putStorageOptItem(String key, String storageOptItem) {
    if (this.storageOpt == null) {
      this.storageOpt = new HashMap<String, String>();
    }
    this.storageOpt.put(key, storageOptItem);
    return this;
  }

   /**
   * Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. 
   * @return storageOpt
  **/
  @ApiModelProperty(value = "Storage driver options for this container, in the form `{\"size\": \"120G\"}`. ")
  public Map<String, String> getStorageOpt() {
    return storageOpt;
  }

  public void setStorageOpt(Map<String, String> storageOpt) {
    this.storageOpt = storageOpt;
  }

  public HostConfig tmpfs(Map<String, String> tmpfs) {
    this.tmpfs = tmpfs;
    return this;
  }

  public HostConfig putTmpfsItem(String key, String tmpfsItem) {
    if (this.tmpfs == null) {
      this.tmpfs = new HashMap<String, String>();
    }
    this.tmpfs.put(key, tmpfsItem);
    return this;
  }

   /**
   * A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: &#x60;{ \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; }&#x60;. 
   * @return tmpfs
  **/
  @ApiModelProperty(value = "A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`. ")
  public Map<String, String> getTmpfs() {
    return tmpfs;
  }

  public void setTmpfs(Map<String, String> tmpfs) {
    this.tmpfs = tmpfs;
  }

  public HostConfig utSMode(String utSMode) {
    this.utSMode = utSMode;
    return this;
  }

   /**
   * UTS namespace to use for the container.
   * @return utSMode
  **/
  @ApiModelProperty(value = "UTS namespace to use for the container.")
  public String getUtSMode() {
    return utSMode;
  }

  public void setUtSMode(String utSMode) {
    this.utSMode = utSMode;
  }

  public HostConfig usernsMode(String usernsMode) {
    this.usernsMode = usernsMode;
    return this;
  }

   /**
   * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
   * @return usernsMode
  **/
  @ApiModelProperty(value = "Sets the usernamespace mode for the container when usernamespace remapping option is enabled.")
  public String getUsernsMode() {
    return usernsMode;
  }

  public void setUsernsMode(String usernsMode) {
    this.usernsMode = usernsMode;
  }

  public HostConfig shmSize(Integer shmSize) {
    this.shmSize = shmSize;
    return this;
  }

   /**
   * Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB.
   * minimum: 0
   * @return shmSize
  **/
  @ApiModelProperty(value = "Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.")
  public Integer getShmSize() {
    return shmSize;
  }

  public void setShmSize(Integer shmSize) {
    this.shmSize = shmSize;
  }

  public HostConfig sysctls(Map<String, String> sysctls) {
    this.sysctls = sysctls;
    return this;
  }

  public HostConfig putSysctlsItem(String key, String sysctlsItem) {
    if (this.sysctls == null) {
      this.sysctls = new HashMap<String, String>();
    }
    this.sysctls.put(key, sysctlsItem);
    return this;
  }

   /**
   * A list of kernel parameters (sysctls) to set in the container. For example: &#x60;{\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;}&#x60; 
   * @return sysctls
  **/
  @ApiModelProperty(value = "A list of kernel parameters (sysctls) to set in the container. For example: `{\"net.ipv4.ip_forward\": \"1\"}` ")
  public Map<String, String> getSysctls() {
    return sysctls;
  }

  public void setSysctls(Map<String, String> sysctls) {
    this.sysctls = sysctls;
  }

  public HostConfig runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Runtime to use with this container.
   * @return runtime
  **/
  @ApiModelProperty(value = "Runtime to use with this container.")
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }

  public HostConfig consoleSize(List<Integer> consoleSize) {
    this.consoleSize = consoleSize;
    return this;
  }

  public HostConfig addConsoleSizeItem(Integer consoleSizeItem) {
    if (this.consoleSize == null) {
      this.consoleSize = new ArrayList<Integer>();
    }
    this.consoleSize.add(consoleSizeItem);
    return this;
  }

   /**
   * Initial console size, as an &#x60;[height, width]&#x60; array. (Windows only)
   * @return consoleSize
  **/
  @ApiModelProperty(value = "Initial console size, as an `[height, width]` array. (Windows only)")
  public List<Integer> getConsoleSize() {
    return consoleSize;
  }

  public void setConsoleSize(List<Integer> consoleSize) {
    this.consoleSize = consoleSize;
  }

  public HostConfig isolation(IsolationEnum isolation) {
    this.isolation = isolation;
    return this;
  }

   /**
   * Isolation technology of the container. (Windows only)
   * @return isolation
  **/
  @ApiModelProperty(value = "Isolation technology of the container. (Windows only)")
  public IsolationEnum getIsolation() {
    return isolation;
  }

  public void setIsolation(IsolationEnum isolation) {
    this.isolation = isolation;
  }

  public HostConfig maskedPaths(List<String> maskedPaths) {
    this.maskedPaths = maskedPaths;
    return this;
  }

  public HostConfig addMaskedPathsItem(String maskedPathsItem) {
    if (this.maskedPaths == null) {
      this.maskedPaths = new ArrayList<String>();
    }
    this.maskedPaths.add(maskedPathsItem);
    return this;
  }

   /**
   * The list of paths to be masked inside the container (this overrides the default set of paths)
   * @return maskedPaths
  **/
  @ApiModelProperty(value = "The list of paths to be masked inside the container (this overrides the default set of paths)")
  public List<String> getMaskedPaths() {
    return maskedPaths;
  }

  public void setMaskedPaths(List<String> maskedPaths) {
    this.maskedPaths = maskedPaths;
  }

  public HostConfig readonlyPaths(List<String> readonlyPaths) {
    this.readonlyPaths = readonlyPaths;
    return this;
  }

  public HostConfig addReadonlyPathsItem(String readonlyPathsItem) {
    if (this.readonlyPaths == null) {
      this.readonlyPaths = new ArrayList<String>();
    }
    this.readonlyPaths.add(readonlyPathsItem);
    return this;
  }

   /**
   * The list of paths to be set as read-only inside the container (this overrides the default set of paths)
   * @return readonlyPaths
  **/
  @ApiModelProperty(value = "The list of paths to be set as read-only inside the container (this overrides the default set of paths)")
  public List<String> getReadonlyPaths() {
    return readonlyPaths;
  }

  public void setReadonlyPaths(List<String> readonlyPaths) {
    this.readonlyPaths = readonlyPaths;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostConfig hostConfig = (HostConfig) o;
    return Objects.equals(this.binds, hostConfig.binds) &&
        Objects.equals(this.containerIDFile, hostConfig.containerIDFile) &&
        Objects.equals(this.logConfig, hostConfig.logConfig) &&
        Objects.equals(this.networkMode, hostConfig.networkMode) &&
        Objects.equals(this.portBindings, hostConfig.portBindings) &&
        Objects.equals(this.restartPolicy, hostConfig.restartPolicy) &&
        Objects.equals(this.autoRemove, hostConfig.autoRemove) &&
        Objects.equals(this.volumeDriver, hostConfig.volumeDriver) &&
        Objects.equals(this.volumesFrom, hostConfig.volumesFrom) &&
        Objects.equals(this.mounts, hostConfig.mounts) &&
        Objects.equals(this.capAdd, hostConfig.capAdd) &&
        Objects.equals(this.capDrop, hostConfig.capDrop) &&
        Objects.equals(this.dns, hostConfig.dns) &&
        Objects.equals(this.dnsOptions, hostConfig.dnsOptions) &&
        Objects.equals(this.dnsSearch, hostConfig.dnsSearch) &&
        Objects.equals(this.extraHosts, hostConfig.extraHosts) &&
        Objects.equals(this.groupAdd, hostConfig.groupAdd) &&
        Objects.equals(this.ipcMode, hostConfig.ipcMode) &&
        Objects.equals(this.cgroup, hostConfig.cgroup) &&
        Objects.equals(this.links, hostConfig.links) &&
        Objects.equals(this.oomScoreAdj, hostConfig.oomScoreAdj) &&
        Objects.equals(this.pidMode, hostConfig.pidMode) &&
        Objects.equals(this.privileged, hostConfig.privileged) &&
        Objects.equals(this.publishAllPorts, hostConfig.publishAllPorts) &&
        Objects.equals(this.readonlyRootfs, hostConfig.readonlyRootfs) &&
        Objects.equals(this.securityOpt, hostConfig.securityOpt) &&
        Objects.equals(this.storageOpt, hostConfig.storageOpt) &&
        Objects.equals(this.tmpfs, hostConfig.tmpfs) &&
        Objects.equals(this.utSMode, hostConfig.utSMode) &&
        Objects.equals(this.usernsMode, hostConfig.usernsMode) &&
        Objects.equals(this.shmSize, hostConfig.shmSize) &&
        Objects.equals(this.sysctls, hostConfig.sysctls) &&
        Objects.equals(this.runtime, hostConfig.runtime) &&
        Objects.equals(this.consoleSize, hostConfig.consoleSize) &&
        Objects.equals(this.isolation, hostConfig.isolation) &&
        Objects.equals(this.maskedPaths, hostConfig.maskedPaths) &&
        Objects.equals(this.readonlyPaths, hostConfig.readonlyPaths) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binds, containerIDFile, logConfig, networkMode, portBindings, restartPolicy, autoRemove, volumeDriver, volumesFrom, mounts, capAdd, capDrop, dns, dnsOptions, dnsSearch, extraHosts, groupAdd, ipcMode, cgroup, links, oomScoreAdj, pidMode, privileged, publishAllPorts, readonlyRootfs, securityOpt, storageOpt, tmpfs, utSMode, usernsMode, shmSize, sysctls, runtime, consoleSize, isolation, maskedPaths, readonlyPaths, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostConfig {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    binds: ").append(toIndentedString(binds)).append("\n");
    sb.append("    containerIDFile: ").append(toIndentedString(containerIDFile)).append("\n");
    sb.append("    logConfig: ").append(toIndentedString(logConfig)).append("\n");
    sb.append("    networkMode: ").append(toIndentedString(networkMode)).append("\n");
    sb.append("    portBindings: ").append(toIndentedString(portBindings)).append("\n");
    sb.append("    restartPolicy: ").append(toIndentedString(restartPolicy)).append("\n");
    sb.append("    autoRemove: ").append(toIndentedString(autoRemove)).append("\n");
    sb.append("    volumeDriver: ").append(toIndentedString(volumeDriver)).append("\n");
    sb.append("    volumesFrom: ").append(toIndentedString(volumesFrom)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    capAdd: ").append(toIndentedString(capAdd)).append("\n");
    sb.append("    capDrop: ").append(toIndentedString(capDrop)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    dnsOptions: ").append(toIndentedString(dnsOptions)).append("\n");
    sb.append("    dnsSearch: ").append(toIndentedString(dnsSearch)).append("\n");
    sb.append("    extraHosts: ").append(toIndentedString(extraHosts)).append("\n");
    sb.append("    groupAdd: ").append(toIndentedString(groupAdd)).append("\n");
    sb.append("    ipcMode: ").append(toIndentedString(ipcMode)).append("\n");
    sb.append("    cgroup: ").append(toIndentedString(cgroup)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    oomScoreAdj: ").append(toIndentedString(oomScoreAdj)).append("\n");
    sb.append("    pidMode: ").append(toIndentedString(pidMode)).append("\n");
    sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
    sb.append("    publishAllPorts: ").append(toIndentedString(publishAllPorts)).append("\n");
    sb.append("    readonlyRootfs: ").append(toIndentedString(readonlyRootfs)).append("\n");
    sb.append("    securityOpt: ").append(toIndentedString(securityOpt)).append("\n");
    sb.append("    storageOpt: ").append(toIndentedString(storageOpt)).append("\n");
    sb.append("    tmpfs: ").append(toIndentedString(tmpfs)).append("\n");
    sb.append("    utSMode: ").append(toIndentedString(utSMode)).append("\n");
    sb.append("    usernsMode: ").append(toIndentedString(usernsMode)).append("\n");
    sb.append("    shmSize: ").append(toIndentedString(shmSize)).append("\n");
    sb.append("    sysctls: ").append(toIndentedString(sysctls)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    consoleSize: ").append(toIndentedString(consoleSize)).append("\n");
    sb.append("    isolation: ").append(toIndentedString(isolation)).append("\n");
    sb.append("    maskedPaths: ").append(toIndentedString(maskedPaths)).append("\n");
    sb.append("    readonlyPaths: ").append(toIndentedString(readonlyPaths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

